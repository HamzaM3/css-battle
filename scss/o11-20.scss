@use 'utils';
@use 'sass:math';

#o11 {
    display: flex;
    justify-content: center;
    align-items: center;
    background: #fbf9fc;

    $r: 100;
    $n: 16;
    $string: 5;
    
    $alpha: 360deg / $n;
    $pearl-radius: $r * math.sin($alpha/2);
    
    .container {
        border: #{$string}px solid black;
        height: #{2*$r - $string}px;
        width: #{2*$r - $string}px;
        border-radius: 50%;
        display: grid;
        justify-items: center;
        align-items: center;
        > div {
            border-radius: 50%;
            height: #{2*.8*$pearl-radius}px;
            width: #{2*.8*$pearl-radius}px;
            background: #eacfc8;
            grid-row: 1;
            grid-column: 1;
            box-sizing: border-box;
            border: 3px solid black;
        }
        
        @for $i from 1 through $n {
            :nth-child(#{$i}) {
                translate: #{$r * math.cos($i * $alpha)}px #{$r * math.sin($i * $alpha)}px;
            }
        }
    }
}

#o12 {
        display: flex;
        justify-content: center;
        align-items: center;
        background: #D4E6FC;
    
    @mixin tangent-triangle($r, $alpha, $dir, $color) {
        $c: $r / math.tan($alpha/2);
        $g: $c * math.cos($alpha/2);
        $f: $c * math.sin($alpha/2);
        
        @if ($dir == up) {
        border-right: #{$f}px solid transparent;
        border-left: #{$f}px solid transparent;
        border-bottom: #{$g}px solid $color;
        }@else {
        border-right: #{$f}px solid transparent;
        border-left: #{$f}px solid transparent;
        border-top: #{$g}px solid $color;
        }
    }
    
    @mixin leaf-shape($r, $alpha, $beta, $color) {
        $ua: (1/math.sin($alpha/2) - 1) * $r;
        $ub: (1/math.sin($beta/2) - 1) * $r;
        display: grid;
        grid-template-rows: #{$ua}px #{2*$r}px #{$ub}px;
        .top {
        @include tangent-triangle($r, $alpha, up, $color);
        grid-row: 1 / span 2;
        grid-column:1;
        justify-self: center;
        align-self: start
        }
        .bottom {
        @include tangent-triangle($r, $beta, down, $color);
        grid-row: 2 / span 2;
        grid-column:1;
        justify-self: center;
        align-self: end
        }
    
        .circle {
        background: $color;
        height: #{2*$r}px;
        width: #{2*$r}px;
        border-radius: 50%;
        grid-row: 2;
        grid-column:1;
        justify-self: center;
        align-self: center;
        }
    }
    
    @mixin leaf($r, $z-index) {
        z-index: #{$z-index};
        
        display: grid;
        >div {
        grid-row:1;
        grid-column:1;
        }
        
        $alpha: 50deg;
        $beta: 100deg;
    
        .black {
        @include leaf-shape($r, $alpha, $beta, black);
        scale:1.2;
        translate: 0 -#{.03 * 2 * $r}px;
        }
        .green {
        @include leaf-shape($r, $alpha, $beta, #3EB812);
        z-index: #{$z-index + 1};
        }
        .line{
        background: black;
        height: #{1.2 * 2 * $r}px;
        width: #{.12 * 2 * $r}px;
        z-index: 15;
        border-radius: #{.1* 2 * $r}px #{.1 * 2 * $r}px 0 0;
        justify-self:center;
        align-self:end;
        }
    }
    
    
    .container {
        display: grid;
        justify-items: center;
        align-items: center;
        > div {
        grid-row: 1;
        grid-column:1;
        }
        
        .point {
        display: none;
        border-radius: 50%;
        background: black;
        height: 10px;
        width: 10px;
        z-index: 10000;
        }
        
        $size: 200;
        height: #{$size}px;
        width: #{$size}px;
        border-radius: 50%;
        
        
        $r: 15;
        $z-index: 10;
    
        $alpha: 50deg;
        $beta: 100deg;
    
        $h: (1/math.sin($alpha/2) + 1/math.sin($beta/2)) * $r;
        
        .leaf {
        @include leaf($r, $z-index);
        }
        
        @for $i from 1 to 10 {
            $angle : 90deg + ($i - 1) * 360deg / 20;
        .leaf:nth-child(#{2 * $i}) {
            
            transform:  translate(#{$size/2 * math.cos($angle)}px, #{$size/2 * math.sin($angle)}px)
                        rotate(#{-180deg + $angle})
                        rotate(-#{(180 - $beta)/2})
                        rotate(-#{2 * $beta - 180})
                        translateY(#{-$h/2}px);
        }
        .leaf:nth-child(#{2 * $i + 1}) {
            
            transform:  translate(#{$size/2 * math.cos($angle)}px, #{$size/2 * math.sin($angle)}px)
                        rotate(#{-180deg + $angle})
                        rotate(#{(180 - $beta)/2 + 2 * $beta - 180})
                        translateY(#{-$h/2}px);
        }
        }
        @for $j from 10 to 22 {
            $i: $j - 10 + 1;
            $angle : 90deg - ($i - 1) * 360deg / 20;
        .leaf:nth-child(#{2 * $j}) {
            
            transform:  translate(#{$size/2 * math.cos($angle)}px, #{$size/2 * math.sin($angle)}px)
                        rotate(180deg)
                        rotate(#{-180deg + $angle})
                        rotate(-#{(180 - $beta)/2})
                        rotate(-#{2 * $beta - 180})
                        translateY(#{-$h/2}px);
        }
        .leaf:nth-child(#{2 * $j + 1}) {
            
            transform:  translate(#{$size/2 * math.cos($angle)}px, #{$size/2 * math.sin($angle)}px)
                
                        rotate(180deg)
                        rotate(#{-180deg + $angle})
                        rotate(#{(180 - $beta)/2 + 2 * $beta - 180})
                        translateY(#{-$h/2}px);
        }
        }
    }
}

#o13 {
    $angle: 60deg;
    $size: 200;
    $width: 40;

    display: flex;
    justify-content: center;
    align-items: center;

    @mixin round-triangle($size, $color, $width) {
        height: #{math.sqrt(3) * $size / 2 + $width}px;
        width: #{$size + $width}px;

        display: grid;
        > div {
            grid-row: 1;
            grid-column: 1;
        }
        .circle {
            width: #{$width}px;
            height: #{$width}px;
            background: $color;
            border-radius: 50%;

            &:nth-child(1) {
            align-self: end;
            justify-self: start;
            }
            &:nth-child(2) {
            align-self: end;
            justify-self: end;
            }
            &:nth-child(3) {
            align-self: start;
            justify-self: center;
            }
        }
        
        .line {
            background: $color;
        }

        .line:nth-child(4) {
            height: #{$width}px;
            width: #{$size}px;
            align-self: end;
            justify-self: start;
            transform: translateX(-#{$size/2 - $width/2}px)
            rotate(-60deg)
            translateX(#{($size)/2}px)
            }
        .line:nth-child(5) {
            height: #{$width}px;
            width: #{$size}px;
            align-self: end;
            justify-self: end;
            transform: translateX(#{$size/2 - $width/2}px)
            rotate(60deg)
            translateX(-#{($size)/2}px);
                }
        .line:nth-child(6) {
            height: #{$width}px;
            width: #{$size}px;
            align-self: end;
            justify-self: center;
        }

        .triangle {
            border-bottom: #{math.sqrt(3) * ($size - $width/2) / 2}px solid $color;
            border-left: #{($size - $width/2) / 2}px solid transparent;
            border-right: #{($size - $width/2) / 2}px solid transparent;
            align-self: center;
            justify-self: center;
        }
    }

    .black-triangle {
    @include round-triangle(110, black, 40);
    z-index: 10;
    }

    .blue-triangle {
    @include round-triangle(100, #59CBE8, 20);
        z-index: 20;
        translate: 0 2px;
    }

    .bottom {
        display: grid;
        justify-items: center;
        align-items: center;
        
        > div {
            grid-row: 1;
            grid-column:1;
        }
        
        justify-self: center;
        align-self: end;
    }

    .container {
        height: 203px;
        display: grid;
        justify-items: center;
        align-items: center;
        transform: translateY(10px);
        > div {
            grid-row: 1;
            grid-column: 1;
        }
        }

        .top {
        border-left: 12px solid black;
        border-right: 12px solid black;
        width: 30px;
        height: 100px;
        z-index: 100;
        display: grid;
        justify-items: stretch;
        align-items: end;
        
        .inner {
            height: 40px;
            background: #59CBE8;
        }
        justify-self: center;
        align-self: start;
    }

    .bubble {
        width: 20px;
        height: 20px;
        
        background: #59CBE8;
        align-self: start;
        justify-self: start;
        
        border-radius: 50%;
        
        &:nth-child(3) {
            transform: scale(1.2) translate(-20px, -15px) translate(50px, -30px)
        }
        &:nth-child(4) {
            transform: scale(1.5) translate(-50px, 10px) translate(50px, -30px)
        }
        
        &:nth-child(5) {
            transform:  translate(50px, -30px)
        }
    }
}

#o14 {
    display: flex;
    justify-content: start;
    align-items: start;
    background: #da0a0a;
    
    .hammer {
        display: grid;
        justify-items: center;
        align-items: center;
        > div {
            background: #faf333;
        }
        .head {
            width: 90px;
            height: 30px;
            
            display: grid;
            justify-items: end;
            align-items: start;
            transform: scale(1.1);
        .corner {
            background: #da0a0a;
            height: 20px;
            width: 30px;
            border-radius: 0 0 0 100%;
            transform: scale(1.1)
        }
        }
        .handle {
            width: 20px; 
            height: 140px;
        }
        
        transform: rotate(-45deg);
        
        z-index: 2;
    }
    
    .sickle {
        display: grid;
        grid-template-columns: 60px 80px;
        grid-template-rows: 120px 50px;
        .yellow-head {
            height: 120px;
            width: 130px;
        
            background:  #faf333;
            border-radius: 100%;
        
            grid-row: 1;
            grid-column: 1 / span 2;
            
            justify-self: end;
            align-self: end;
        }
        
        .red-head {
            height:100px;
            width: 120px;
        
            background: #da0a0a;
            border-radius:100%;
        
            grid-row: 1;
            grid-column: 1 / span 2;
            
            justify-self: start;
            align-self: center;
            
            transform: translateY(-3px)
        }
        
        .handle {
            height: 60px;
            width: 15px;
            
            background: #faf333;
            
            grid-row: 1 / span 2;
            grid-column: 2;
            
            justify-self: start;
            align-self: end;
        }
        
        .red-handle {
            height: 100px;
            background: #da0a0a;
            
            grid-row: 1 / span 2;
            grid-column: 1;
            
            justify-self: stretch;
            align-self: end;
        }
        z-index: 1;
        transform: rotate(45deg) translate(-10px, 25px)
    }
    
    .container {
        display: grid;
        > div {
            grid-row: 1;
            grid-column: 1;
        }
        transform: translate(15px, -10px) scale(.5)
    }
      
}

#o15 {
    display: flex;
    justify-content: center;
    align-items: center;
    background: #ecefee;

    .nucleus {
        display: grid;
        > div {
            grid-row: 1;
            grid-column: 1;
            width: 15px;
            height: 15px;
            
            border-radius: 50%;
            border: 3px solid black;
        }
        $a : math.sqrt(2) / 2;
        $radius: 18px;
        :nth-child(1) {
            transform: translate(0px, -#{$radius});
            z-index: 6;
            background: #DD495B
        }
        :nth-child(2) {
            transform: translate(-#{$a*$radius}, -#{$radius/2});
            z-index: 7;
            background: #757687;
        }
        :nth-child(3) {
            z-index: 5;
            background: #DD495B
        }
        :nth-child(4) {
            transform: translate(-#{$a*$radius}, #{$radius/2});
            z-index: 4;
            background: #DD495B
        }
        :nth-child(5) {
            transform: translate(#{$a*$radius}, -#{$radius/2});
            z-index: 3;
            background: #757687;
        }
        :nth-child(6) {
            transform: translate(#{$a*$radius}, #{$radius/2});
            z-index: 2;
            background: #757687;
        }
        :nth-child(7) {
            transform: translate(0px, #{$radius});
            z-index: 1;
            background: #DD495B
        }
    }

    .electrons{
        display: grid;
        > div {
            grid-row:1;
            grid-column: 1;
            
            border-radius: 50%;
            border: 3px solid #74AEAB;
            
            height: 100px;
            width: 200px;
            
            display: grid;
            &::before {
                content: '';
                display: block;
                width: 12px;
                height: 12px;
                
                border-radius: 50%;
                
                background: #59CBE8;
                align-self:center;
                justify-self: end;
                
                transform: translateX(8px)
            }
        }
        :nth-child(1) {
            transform: rotate(-120deg)
        }
        :nth-child(2) {
            transform: rotate(120deg)
        }
    }

    .container {
        display: grid;
        justify-items: center;
        align-items: center;
        > div {
            grid-row: 1;
            grid-column:1;
        }
    }
}

#o16 {
    background: white;
    
    $red: #BC002D;
    
    $angle: 360deg / 32;
    $h: 800px;
    $r : math.tan($angle/2) * $h;
    
    $size: 150px;
        
    .sun {
        width: #{$size};
        height: #{$size};
        
        border-radius: 50%;
        background: $red;
        
        display: grid;
        justify-content: center;
        align-items: center;
        
        .ray {
            grid-row:1;
            grid-column: 1;
            
            width: 0;
            height:0;
            
            border-left: #{$r} solid transparent;
            border-right: #{$r} solid transparent;
            border-bottom: #{$h} solid $red;
        }
        
        @for $i from 1 through 16 {
            $alpha: 2 * $i * $angle;
            :nth-child(#{$i}) {
                transform: translateY(#{$size/2}) translateY(-#{$h/2}) rotate($alpha) translateY(#{$h/2})
            }
        }
        
        transform: translate(80px, 75px)
    }
}